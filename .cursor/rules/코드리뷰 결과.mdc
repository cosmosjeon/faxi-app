---
description: "AI 코드 생성 시 품질 관리를 위한 필수 규칙"
alwaysApply: true
---

# AI 코드 생성 품질 가이드라인

## 🚫 절대 하지 말아야 할 것들

### 1. 과도한 주석 금지
```typescript
// ❌ BAD - 모든 줄마다 주석
// Zustand 라이브러리를 가져옵니다 (가벼운 상태 관리)
import { create } from "zustand";
// Supabase의 타입들을 가져옵니다
import { User, Session } from "@supabase/supabase-js";

// ✅ GOOD - 필요한 경우만 주석
import { create } from "zustand";
import { User, Session } from "@supabase/supabase-js";

// BLE 프린터 설정값 (하드웨어 스펙)
const PRINTER_MAX_WIDTH = 384;
```

### 2. 코드 중복 생성 금지
- 동일한 기능의 파일을 여러 개 만들지 마세요
- providers.tsx와 client-providers.tsx 같은 중복 파일 생성 금지
- 공통 로직은 반드시 하나의 파일로 통합

### 3. 불필요한 복잡성 제거
```typescript
// ❌ BAD - 과도한 방어적 프로그래밍
if (!data) throw new Error("Data is null");
if (!data.id) throw new Error("ID is missing");
if (!data.name) throw new Error("Name is missing");
if (!data.email) throw new Error("Email is missing");

// ✅ GOOD - 간단한 검증
if (!data?.id) {
  toast.error("잘못된 데이터입니다.");
  return;
}
```

## ✅ 반드시 따라야 할 원칙

### 1. MVP 우선 접근
- **YAGNI (You Aren't Gonna Need It)**: 지금 당장 필요하지 않은 기능은 구현하지 마세요
- **KISS (Keep It Simple, Stupid)**: 가능한 한 단순하게 구현하세요
- 미래의 확장성보다 현재의 작동에 집중

### 2. 주석 작성 원칙
- 코드가 "무엇을" 하는지가 아닌 "왜" 하는지만 설명
- 복잡한 비즈니스 로직이나 특별한 이유가 있을 때만 주석 추가
- 타입 정의나 함수명으로 충분히 설명되는 것은 주석 불필요

### 3. 에러 처리 간소화
```typescript
// ✅ GOOD - 사용자 친화적 메시지만
try {
  const result = await apiFunction();
  return result;
} catch (error) {
  toast.error("작업을 완료할 수 없습니다.");
  console.error(error); // 개발자용 로그
}
```

### 4. 상태 관리 단순화
```typescript
// ❌ BAD - 너무 많은 개별 상태
const [loading, setLoading] = useState(false);
const [error, setError] = useState(null);
const [data, setData] = useState(null);
const [isSubmitting, setIsSubmitting] = useState(false);

// ✅ GOOD - 관련 상태 그룹화
const [state, setState] = useState({
  loading: false,
  error: null,
  data: null
});
```

### 5. Provider 최소화
- 정말 필요한 Provider만 사용
- 사용하지 않는 기능의 Provider 추가 금지 (예: 다크모드 미사용 시 ThemeProvider 제외)

## 📝 코드 생성 체크리스트

생성한 코드가 다음 기준을 만족하는지 확인:

1. [ ] 주석이 전체 코드의 10% 미만인가?
2. [ ] 동일한 기능의 중복 파일이 없는가?
3. [ ] 현재 요구사항에 필요한 코드만 작성했는가?
4. [ ] 에러 처리가 간단명료한가?
5. [ ] 불필요한 추상화나 일반화가 없는가?
6. [ ] Mock 데이터가 최소한으로 유지되는가?

## 🎯 목표

**"작동하는 가장 간단한 코드"**를 작성하세요.
- 코드는 자산이 아닌 부채입니다
- 적게 쓸수록 좋습니다
- 나중에 필요하면 그때 추가하면 됩니다

## 💡 기억하세요

- AI가 생성한 코드는 종종 과도하게 복잡합니다
- 인간 개발자처럼 간결하고 실용적인 코드를 작성하세요
- MVP는 "Minimum"이 핵심입니다