---
alwaysApply: false
---
# 기술 요구 사항 문서 (TRD)

## 1. Executive Technical Summary

### 프로젝트 개요
Studio Pensieve는 Next.js 기반의 프로그레시브 웹 앱(PWA)과 BLE(Bluetooth Low Energy) 통신을 통해 연동되는 소형 감성 프린터를 결합한 오프라인 SNS 플랫폼입니다. 본 프로젝트의 기술적 접근 방식은 빠른 MVP(Minimum Viable Product) 출시를 위해 검증되고 개발 생산성이 높은 기술 스택을 채택하는 데 중점을 둡니다. 백엔드 인프라는 Supabase를 BaaS(Backend as a Service)로 활용하여 개발 리소스를 최소화하고, 클라이언트는 Web Bluetooth API를 통해 프린터와 직접 통신합니다. 이 아키텍처는 초기 시장 검증을 신속하게 수행하는 데 최적화되어 있습니다.

### 핵심 기술 스택
- **프레임워크**: Next.js (React)
- **백엔드 및 데이터베이스**: Supabase (PostgreSQL, Auth, Storage, Realtime)
- **UI/스타일링**: Tailwind CSS, shadcn/ui
- **핵심 통신 기술**: Web Bluetooth API, HTTPS/WSS

### 주요 기술 목표
- **신속한 MVP 개발**: 3개월 내 핵심 기능(메시지 전송, BLE 프린팅)을 포함한 MVP 버전 출시
- **안정적인 BLE 연동**: 안드로이드 및 데스크톱 환경에서 90% 이상의 BLE 연결 성공률 달성
- **확장 가능한 기반 마련**: Supabase를 활용하여 초기 사용자 1만 명 및 월 10만 건의 메시지를 안정적으로 처리할 수 있는 확장성 기반 구축
- **비용 효율성**: Vercel 및 Supabase의 무료/저비용 티어를 최대한 활용하여 초기 인프라 비용 최소화

### 핵심 기술 가정
- Web Bluetooth API를 사용하는 PWA 방식은 MVP 단계에서 안드로이드 및 데스크톱 사용자에게만 BLE 프린팅 기능을 제공하며, iOS는 지원되지 않는 제약을 비즈니스적으로 수용합니다.
- Supabase의 기본 제공 기능(인증, 데이터베이스, 스토리지)이 MVP의 요구 사항을 모두 충족합니다.
- 하드웨어(프린터) 펌웨어는 명세에 따라 안정적으로 BLE GATT 서비스를 제공할 수 있도록 준비됩니다.

## 2. Tech Stack

| 카테고리 | 기술 / 라이브러리 | 선정 사유 |
| --- | --- | --- |
| **프레임워크** | Next.js (App Router) | React 기반의 높은 생산성과 PWA 구축 용이성. 서버 컴포넌트를 활용한 성능 최적화 및 Vercel 배포 편의성으로 MVP 개발 속도 극대화. |
| **백엔드** | Supabase | 인증, 데이터베이스, 스토리지, 실시간 기능을 통합 제공하는 BaaS. 백엔드 개발 공수를 획기적으로 줄여 프론트엔드 및 BLE 연동에 집중 가능. |
| **데이터베이스** | PostgreSQL (via Supabase) | Supabase의 기본 데이터베이스로, 관계형 데이터 모델링에 적합하며 안정성과 확장성이 검증됨. |
| **UI / 스타일링** | Tailwind CSS & shadcn/ui | 유틸리티 우선 접근 방식으로 신속한 UI 개발을 지원. shadcn/ui는 완성도 높은 컴포넌트를 제공하여 개발 속도를 높이고 일관된 디자인을 유지. |
| **상태 관리** | Zustand | 가볍고 직관적인 API를 제공하는 미니멀한 상태 관리 라이브러리. Boilerplate가 적어 빠른 개발에 적합하며, 복잡한 상태 로직을 효율적으로 관리. |
| **핵심 API** | Web Bluetooth API | 별도 네이티브 앱 개발 없이 웹 기술만으로 BLE 기기와 통신 가능. 안드로이드/데스크톱 환경에서 빠른 프로토타이핑 및 MVP 구현에 최적화. |
| **배포** | Vercel | Next.js에 최적화된 배포 플랫폼. CI/CD 파이프라인 자동화 및 손쉬운 환경 설정으로 개발자가 배포 부담 없이 코드에만 집중할 수 있도록 지원. |
| **분석 / 모니터링** | Sentry, Amplitude | PRD 요구사항에 명시된 서비스. Sentry는 실시간 에러 추적, Amplitude는 사용자 행동 분석을 통해 서비스 품질 개선 및 데이터 기반 의사결정 지원. |

## 3. System Architecture Design

### Top-Level building blocks
- **클라이언트 (PWA)**: Next.js로 구축된 프로그레시브 웹 앱. 사용자와의 모든 상호작용을 담당하며, UI 렌더링, 상태 관리, Supabase 백엔드 통신 및 BLE 프린터 제어를 수행합니다.
    - **하위 구성 요소**: UI 컴포넌트(shadcn/ui), BLE 통신 서비스, Supabase API 클라이언트, 상태 관리(Zustand)
- **백엔드 (Supabase)**: 프로젝트의 중앙 데이터 및 인증 허브 역할을 하는 BaaS 플랫폼. 별도의 서버 구축 없이 데이터베이스, 사용자 인증, 파일 저장, 실시간 메시징 기능을 제공합니다.
    - **하위 구성 요소**: PostgreSQL 데이터베이스, 인증(Auth), 스토리지(Storage), 실시간(Realtime) 구독
- **BLE 프린터 (하드웨어)**: 사용자가 물리적으로 소유하는 감열지 프린터. PWA 클라이언트로부터 Web Bluetooth API를 통해 직접 인쇄 명령을 수신하여 텍스트와 이미지를 출력합니다.
- **푸시 알림 서비스**: Supabase 트리거와 연동된 서버리스 함수를 통해 FCM(Firebase Cloud Messaging) 및 APNs(Apple Push Notification Service)로 새 메시지 알림을 전송합니다.

### Top-Level Component Interaction Diagram

```mermaid
graph TD
    subgraph "사용자 기기"
        A[사용자] -- 상호작용 --> B[PWA 클라이언트 (Next.js)]
        B -- Web Bluetooth API --> D[BLE 프린터]
    end

    subgraph "클라우드 인프라"
        B -- HTTPS/WSS (Supabase Client) --> C[Supabase 백엔드]
        C -- 데이터베이스 쿼리 --> E[PostgreSQL DB]
        C -- 파일 CRUD --> F[Storage]
        C -- 인증 요청 --> G[Auth]
        C -- 실시간 구독 --> B
        C -- 트리거 --> H[Push Notification Service (FCM/APNs)]
    end

    H -- 푸시 알림 --> B

    subgraph "서드파티 서비스"
        B -- 로그/이벤트 전송 --> I[Sentry / Amplitude]
    end
```

- **사용자 상호작용**: 사용자는 PWA 클라이언트를 통해 친구 추가, 메시지 전송 등의 기능을 사용합니다.
- **백엔드 통신**: PWA는 Supabase 클라이언트 라이브러리를 사용하여 HTTPS/WSS 프로토콜로 Supabase의 인증, 데이터베이스, 스토리지 서비스와 안전하게 통신합니다.
- **실시간 통신**: 새 메시지 수신 등 실시간 업데이트가 필요한 경우, PWA는 Supabase의 Realtime 기능을 구독하여 즉각적인 UI 변경을 반영합니다.
- **프린터 통신**: 사용자가 인쇄를 요청하면, PWA는 Web Bluetooth API를 통해 사용자의 기기에 페어링된 BLE 프린터와 직접 통신하여 인쇄 데이터를 전송합니다.

### Code Organization & Convention
**Domain-Driven Organization Strategy**
- **도메인 분리**: 비즈니스 도메인(예: `users`, `friends`, `messages`, `printer`)을 중심으로 코드를 구성하여 응집도를 높이고 결합도를 낮춥니다. 각 도메인 폴더는 관련된 API 함수, 타입 정의, UI 컴포넌트를 포함합니다.
- **계층 기반 아키텍처**: 코드를 명확한 책임에 따라 `presentation`(UI 컴포넌트), `application`(커스텀 훅, 상태 관리), `domain`(타입, 비즈니스 로직), `infrastructure`(API 클라이언트, 유틸리티) 계층으로 분리합니다.
- **기능 기반 모듈**: 사용자의 특정 기능(예: `auth`, `message-composer`, `friend-list`)과 관련된 파일들을 하나의 폴더에 그룹화하여 관리합니다.
- **공유 컴포넌트**: 여러 도메인에서 공통으로 사용되는 유틸리티, 타입, UI 컴포넌트 등은 `lib`, `components/ui`와 같은 공유 모듈에 배치합니다.

**Universal File & Folder Structure**
사용자가 제공한 구조를 기반으로 하며, 도메인 중심 설계를 적용하여 확장성을 고려합니다.
```
/
├── 📁 src/                          # 소스 코드 루트
│   ├── 📁 app/                      # Next.js App Router (라우팅 및 페이지)
│   │   ├── (auth)/                 # 인증 관련 라우트 그룹
│   │   ├── (main)/                 # 메인 서비스 라우트 그룹
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx            # 메인 페이지 (메시지 피드)
│   │   ├── api/                    # API 라우트 핸들러 (필요시)
│   │   ├── layout.tsx              # 루트 레이아웃
│   │   └── providers.tsx           # 전역 프로바이더 (TanStack Query, Zustand 등)
│   │
│   ├── 📁 components/               # 재사용 가능한 UI 컴포넌트
│   │   ├── 📁 domain/               # 도메인 특화 컴포넌트 (예: message-card, friend-item)
│   │   └── 📁 ui/                   # shadcn/ui 기반의 범용 UI 컴포넌트
│   │
│   ├── 📁 domain/                   # 도메인 로직 및 타입
│   │   ├── 📁 messages/
│   │   │   ├── api.ts              # 메시지 관련 API 호출 함수
│   │   │   └── types.ts            # 메시지 타입 정의
│   │   └── 📁 users/
│   │
│   ├── 📁 hooks/                    # 커스텀 훅 (예: useBlePrinter, useUser)
│   │
│   └── 📁 lib/                      # 라이브러리 및 유틸리티
│       ├── 📁 supabase/             # Supabase 클라이언트 설정
│       │   ├── client.ts           # 클라이언트 사이드 인스턴스
│       │   └── server.ts           # 서버 사이드 인스턴스
│       └── utils.ts                # 공통 유틸리티 함수 (포맷팅, 상수 등)
│
├── 📁 supabase/                     # Supabase 로컬 개발 및 마이그레이션 설정
│   └── 📁 migrations/              # 데이터베이스 스키마 마이그레이션 파일
│
├── 📁 public/                       # 정적 파일 (이미지, 폰트 등)
│
├── 📄 package.json                  # 프로젝트 의존성 및 스크립트
├── 📄 tsconfig.json                 # TypeScript 설정
├── 📄 next.config.mjs               # Next.js 설정
└── 📄 tailwind.config.ts           # Tailwind CSS 설정
```

### Data Flow & Communication Patterns
- **클라이언트-서버 데이터 흐름**: 사용자의 입력 및 상호작용은 PWA 클라이언트에서 처리되며, 인증/데이터 요청은 Supabase 백엔드로 API 호출을 통해 전달됩니다. 실시간 메시지 수신, 상태 동기화 등은 Supabase Realtime을 활용합니다. 인쇄 요청은 Web Bluetooth API를 통해 로컬 BLE 프린터로 직접 전송되며, 서버를 경유하지 않습니다.
