"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  User,
  UserPlus,
  Send,
  Clock,
  Check,
  X,
  Image as ImageIcon,
  Printer,
  Bell,
  LogOut,
} from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useAuthStore } from "@/stores/auth.store";
import {
  getMessagesList,
  updateMessagePrintStatus,
} from "@/features/messages/api";
import { isCloseFriend } from "@/features/friends/api";
import type { MessageWithProfiles } from "@/features/messages/types";
import { supabase } from "@/lib/supabase/client";
import { useBlePrinter } from "@/hooks/useBlePrinter";
import { toast } from "@/hooks/use-toast";
import { CardLoading } from "@/components/ui/page-loading";
import { messageToasts } from "@/lib/toasts";

export default function HomePage() {
  const router = useRouter();
  const { profile, signOut } = useAuthStore();
  const printer = useBlePrinter();
  const [messages, setMessages] = useState<MessageWithProfiles[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [processingMessages, setProcessingMessages] = useState<Set<string>>(
    new Set()
  );

  // ÌôïÏù∏ ÌåùÏóÖ Í¥ÄÎ†® ÏÉÅÌÉú
  const [confirmDialog, setConfirmDialog] = useState<{
    isOpen: boolean;
    message: MessageWithProfiles | null;
  }>({
    isOpen: false,
    message: null,
  });

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï∏Îì§Îü¨
  const handleLogout = async () => {
    try {
      await signOut();
      router.push("/login");
      toast({
        title: "Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å",
        description: "ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§.",
      });
    } catch (error) {
      console.error("Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:", error);
      toast({
        title: "Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®",
        description: "Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  };

  // Î©îÏãúÏßÄ Î™©Î°ù Î°úÎìú
  const loadMessages = async () => {
    if (!profile) return;

    setIsLoading(true);
    try {
      const messagesList = await getMessagesList(profile.id);
      // Î∞õÏùÄ Î©îÏãúÏßÄÎßå ÌïÑÌÑ∞ÎßÅ
      const receivedMessages = messagesList.filter(
        (msg) => msg.receiver_id === profile.id
      );
      setMessages(receivedMessages);
    } catch (error) {
      console.error("Î©îÏãúÏßÄ Î™©Î°ù Î°úÎìú Ïã§Ìå®:", error);
      toast({
        title: "Î°úÎìú Ïã§Ìå®",
        description: "Î©îÏãúÏßÄ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ÏÉà Î©îÏãúÏßÄ Ï≤òÎ¶¨ (ÏûêÎèô ÌîÑÎ¶∞Ìä∏ vs ÌôïÏù∏ ÌåùÏóÖ)
  const handleNewMessage = async (newMessage: MessageWithProfiles) => {
    console.log("üîî ÏÉà Î©îÏãúÏßÄ ÏàòÏã†:", newMessage);

    // Î©îÏãúÏßÄ Î™©Î°ùÏóê Ï∂îÍ∞Ä
    setMessages((prev) => [newMessage, ...prev]);

    try {
      // ÏπúÌïú ÏπúÍµ¨Ïù∏ÏßÄ ÌôïÏù∏
      const isCloseFriendStatus = await isCloseFriend(
        profile!.id,
        newMessage.sender_id
      );

      if (isCloseFriendStatus) {
        // ÏπúÌïú ÏπúÍµ¨: ÏûêÎèô ÌîÑÎ¶∞Ìä∏
        console.log("üíñ ÏπúÌïú ÏπúÍµ¨Ïùò Î©îÏãúÏßÄ - ÏûêÎèô ÌîÑÎ¶∞Ìä∏ Ïã§Ìñâ");
        await handleMessageAction(newMessage.id, "approve", true);

        toast({
          title: "ÏπúÌïú ÏπúÍµ¨Ïùò Î©îÏãúÏßÄ",
          description: `${newMessage.sender_profile.display_name}ÎãòÏùò Î©îÏãúÏßÄÍ∞Ä ÏûêÎèôÏúºÎ°ú ÌîÑÎ¶∞Ìä∏Îê©ÎãàÎã§.`,
        });
      } else {
        // ÏùºÎ∞ò ÏπúÍµ¨: ÌôïÏù∏ ÌåùÏóÖ
        console.log("üë• ÏùºÎ∞ò ÏπúÍµ¨Ïùò Î©îÏãúÏßÄ - ÌôïÏù∏ ÌåùÏóÖ ÌëúÏãú");
        setConfirmDialog({
          isOpen: true,
          message: newMessage,
        });

        // ÏïåÎ¶ºÏùå ÎòêÎäî ÏßÑÎèô (Ï∂îÌõÑ Íµ¨ÌòÑ)
        toast({
          title: "ÏÉà Î©îÏãúÏßÄ ÎèÑÏ∞©",
          description: `${newMessage.sender_profile.display_name}ÎãòÏù¥ Î©îÏãúÏßÄÎ•º Î≥¥ÎÉàÏäµÎãàÎã§.`,
        });
      }
    } catch (error) {
      console.error("ÏÉà Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®:", error);
      // Ïò§Î•ò Î∞úÏÉù Ïãú ÏùºÎ∞ò ÏπúÍµ¨Î°ú Ï≤òÎ¶¨
      setConfirmDialog({
        isOpen: true,
        message: newMessage,
      });
    }
  };

  // Supabase Realtime Íµ¨ÎèÖ
  useEffect(() => {
    if (!profile) return; // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎäî Realtime Íµ¨ÎèÖ Ïïà Ìï®

    console.log("üîÑ Supabase Realtime Íµ¨ÎèÖ ÏãúÏûë");

    const channel = supabase
      .channel("public:messages")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "messages",
          filter: `receiver_id=eq.${profile.id}`,
        },
        async (payload) => {
          console.log("üì® Realtime ÏÉà Î©îÏãúÏßÄ:", payload);

          // ÏÉà Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞Î•º ÏôÑÏ†ÑÌïú ÌòïÌÉúÎ°ú Íµ¨ÏÑ±
          try {
            const messagesList = await getMessagesList(profile.id);
            const newMessage = messagesList.find(
              (msg) => msg.id === payload.new.id
            );

            if (newMessage) {
              await handleNewMessage(newMessage);
            }
          } catch (error) {
            console.error("Realtime Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®:", error);
          }
        }
      )
      .subscribe();

    return () => {
      console.log("üîÑ Supabase Realtime Íµ¨ÎèÖ Ìï¥Ï†ú");
      supabase.removeChannel(channel);
    };
  }, [profile]);

  // Î©îÏãúÏßÄ ÏäπÏù∏/Í±∞Ï†à Ìï∏Îì§Îü¨
  const handleMessageAction = async (
    messageId: string,
    action: "approve" | "reject",
    isAutomatic: boolean = false
  ) => {
    setProcessingMessages((prev) => new Set(prev).add(messageId));

    try {
      const status = action === "approve" ? "approved" : "failed";
      await updateMessagePrintStatus(messageId, status);

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === messageId ? { ...msg, print_status: status } : msg
        )
      );

      if (action === "approve") {
        // ÌîÑÎ¶∞Ìä∏ ÏäπÏù∏ Ïãú Ïã§Ï†ú ÌîÑÎ¶∞ÌÑ∞Î°ú Ï†ÑÏÜ°
        const message = messages.find((msg) => msg.id === messageId);
        if (message) {
          try {
            await printer.printMessage({
              text: message.content || undefined,
              imageUrl: message.image_url || undefined,
              lcdTeaser: message.lcd_teaser || undefined,
              senderName: message.sender_profile.display_name,
            });

            console.log("üñ®Ô∏è Î©îÏãúÏßÄ ÌîÑÎ¶∞Ìä∏ ÏûëÏóÖ Ï∂îÍ∞Ä:", messageId);

            if (!isAutomatic) {
              toast({
                title: "ÌîÑÎ¶∞Ìä∏ ÏãúÏûë",
                description: `${message.sender_profile.display_name}ÎãòÏùò Î©îÏãúÏßÄÎ•º Ï∂úÎ†•Ìï©ÎãàÎã§.`,
              });
            }
          } catch (printError) {
            console.error("ÌîÑÎ¶∞Ìä∏ ÏûëÏóÖ Ï∂îÍ∞Ä Ïã§Ìå®:", printError);

            // ÌîÑÎ¶∞ÌÑ∞ Ïó∞Í≤∞Ïù¥ Ïïà Îêú Í≤ΩÏö∞ÏóêÎèÑ UI ÌîºÎìúÎ∞± Ï†úÍ≥µ
            if (!isAutomatic) {
              toast({
                title: "ÌîÑÎ¶∞ÌÑ∞ ÌôïÏù∏ ÌïÑÏöî",
                description: "ÌîÑÎ¶∞ÌÑ∞Î•º Ïó∞Í≤∞Ìïú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
                variant: "destructive",
              });
            }
          }
        }
      }

      if (!isAutomatic) {
        toast({
          title: action === "approve" ? "Î©îÏãúÏßÄ ÏäπÏù∏Îê®" : "Î©îÏãúÏßÄ Í±∞Ï†àÎê®",
          description:
            action === "approve"
              ? "Î©îÏãúÏßÄÍ∞Ä ÌîÑÎ¶∞Ìä∏ ÎåÄÍ∏∞Ïó¥Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§."
              : "Î©îÏãúÏßÄÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.",
        });
      }
    } catch (error) {
      console.error("Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®:", error);
      toast({
        title: "Ï≤òÎ¶¨ Ïã§Ìå®",
        description: "Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setProcessingMessages((prev) => {
        const newSet = new Set(prev);
        newSet.delete(messageId);
        return newSet;
      });
    }
  };

  // ÌôïÏù∏ ÌåùÏóÖ ÏäπÏù∏
  const handleConfirmPrint = async () => {
    if (confirmDialog.message) {
      await handleMessageAction(confirmDialog.message.id, "approve");
    }
    setConfirmDialog({ isOpen: false, message: null });
  };

  // ÌôïÏù∏ ÌåùÏóÖ Í±∞Ï†à
  const handleConfirmReject = async () => {
    if (confirmDialog.message) {
      await handleMessageAction(confirmDialog.message.id, "reject");
    }
    setConfirmDialog({ isOpen: false, message: null });
  };

  useEffect(() => {
    loadMessages();
  }, [profile]);

  // Î©îÏãúÏßÄ ÏãúÍ∞Ñ Ìè¨Îß∑
  const formatMessageTime = (createdAt: string) => {
    const now = new Date();
    const messageTime = new Date(createdAt);
    const diffInMinutes = Math.floor(
      (now.getTime() - messageTime.getTime()) / (1000 * 60)
    );

    if (diffInMinutes < 1) return "Î∞©Í∏à Ï†Ñ";
    if (diffInMinutes < 60) return `${diffInMinutes}Î∂Ñ Ï†Ñ`;

    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}ÏãúÍ∞Ñ Ï†Ñ`;

    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays}Ïùº Ï†Ñ`;

    return messageTime.toLocaleDateString();
  };

  // ÏÉÅÌÉúÎ≥Ñ Î±ÉÏßÄ
  const getStatusBadge = (status: MessageWithProfiles["print_status"]) => {
    switch (status) {
      case "pending":
        return (
          <Badge variant="secondary" className="gap-1">
            <Clock size={12} />
            ÎåÄÍ∏∞Ï§ë
          </Badge>
        );
      case "approved":
        return (
          <Badge variant="default" className="gap-1">
            <Printer size={12} />
            ÌîÑÎ¶∞Ìä∏ Ï§ÄÎπÑ
          </Badge>
        );
      case "completed":
        return (
          <Badge variant="outline" className="gap-1">
            <Check size={12} />
            ÏôÑÎ£å
          </Badge>
        );
      case "failed":
        return (
          <Badge variant="destructive" className="gap-1">
            <X size={12} />
            Í±∞Ï†àÎê®
          </Badge>
        );
      default:
        return null;
    }
  };

  // ÎåÄÍ∏∞Ï§ëÏù∏ Î©îÏãúÏßÄ Í∞úÏàò
  const pendingCount = messages.filter(
    (msg) => msg.print_status === "pending"
  ).length;

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-md mx-auto space-y-4">
        {/* Ìó§Îçî */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                ÏïàÎÖïÌïòÏÑ∏Ïöî, {profile?.display_name || "ÏÇ¨Ïö©Ïûê"}Îãò! üëã
              </h1>
              <p className="text-gray-600 mt-1">
                {pendingCount > 0
                  ? `${pendingCount}Í∞úÏùò ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä ÏûàÏäµÎãàÎã§`
                  : "ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî"}
              </p>
            </div>
            {profile && (
              <Button
                variant="ghost"
                onClick={handleLogout}
                className="text-red-600 hover:text-red-700"
              >
                <LogOut size={18} />
                Î°úÍ∑∏ÏïÑÏõÉ
              </Button>
            )}
          </div>

          {/* ÌîÑÎ¶∞ÌÑ∞ ÏÉÅÌÉú ÌëúÏãú */}
          <div className="mt-3 flex items-center gap-2 text-sm">
            {printer.isConnected ? (
              <div className="flex items-center gap-1 text-green-600">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span>ÌîÑÎ¶∞ÌÑ∞ Ïó∞Í≤∞Îê®</span>
                {printer.connectedPrinter && (
                  <span className="text-gray-500">
                    ({printer.connectedPrinter.name})
                  </span>
                )}
              </div>
            ) : printer.isConnecting ? (
              <div className="flex items-center gap-1 text-blue-600">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <span>ÌîÑÎ¶∞ÌÑ∞ Ïó∞Í≤∞ Ï§ë...</span>
              </div>
            ) : printer.hasError ? (
              <div className="flex items-center gap-1 text-red-600">
                <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                <span>ÌîÑÎ¶∞ÌÑ∞ Ïó∞Í≤∞ Ïò§Î•ò</span>
              </div>
            ) : (
              <div className="flex items-center gap-1 text-gray-500">
                <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                <span>ÌîÑÎ¶∞ÌÑ∞ Ïó∞Í≤∞ ÏïàÎê®</span>
              </div>
            )}

            {printer.isPrinting && (
              <div className="flex items-center gap-1 text-blue-600 ml-2">
                <Printer size={12} className="animate-pulse" />
                <span>ÌîÑÎ¶∞Ìä∏ Ï§ë</span>
              </div>
            )}
          </div>
        </div>

        {/* Î∞õÏùÄ Î©îÏãúÏßÄ ÌîºÎìú */}
        <Card>
          <CardHeader>
            <CardTitle>Î∞õÏùÄ Î©îÏãúÏßÄ</CardTitle>
            <CardDescription>
              ÏπúÍµ¨Îì§Ïù¥ Î≥¥ÎÇ∏ Î©îÏãúÏßÄÎì§ÏùÑ ÌôïÏù∏ÌïòÍ≥† Ï∂úÎ†•Ìï¥Î≥¥ÏÑ∏Ïöî
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <CardLoading message="Î©îÏãúÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë..." />
            ) : messages.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <div className="text-4xl mb-4">üì®</div>
                <p>ÏïÑÏßÅ Î∞õÏùÄ Î©îÏãúÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                <p className="text-sm mt-2">
                  ÏπúÍµ¨Î•º Ï∂îÍ∞ÄÌïòÍ≥† Î©îÏãúÏßÄÎ•º Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî!
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className="border rounded-lg p-4 bg-white hover:bg-gray-50 transition-colors"
                  >
                    {/* Î©îÏãúÏßÄ Ìó§Îçî */}
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Avatar className="h-8 w-8">
                          <AvatarImage
                            src={message.sender_profile.avatar_url || ""}
                            alt={message.sender_profile.display_name}
                          />
                          <AvatarFallback className="text-xs">
                            {message.sender_profile.display_name[0]?.toUpperCase()}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <p className="font-medium text-sm">
                            {message.sender_profile.display_name}
                          </p>
                          <p className="text-xs text-gray-500">
                            {formatMessageTime(message.created_at)}
                          </p>
                        </div>
                      </div>
                      {getStatusBadge(message.print_status)}
                    </div>

                    {/* LCD Ìã∞Ï†Ä ÎØ∏Î¶¨Î≥¥Í∏∞Îßå ÌëúÏãú */}
                    <div className="mb-3">
                      {message.lcd_teaser ? (
                        <div className="bg-gray-900 text-green-400 font-mono text-sm p-3 rounded-lg text-center">
                          "{message.lcd_teaser}"
                        </div>
                      ) : (
                        <div className="bg-gray-100 text-gray-500 text-sm p-3 rounded-lg text-center">
                          ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞ ÏóÜÏùå
                        </div>
                      )}
                    </div>

                    {/* Ïï°ÏÖò Î≤ÑÌäº (ÎåÄÍ∏∞Ï§ëÏù∏ Î©îÏãúÏßÄÎßå) */}
                    {message.print_status === "pending" && (
                      <div className="flex gap-2 pt-3 border-t">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() =>
                            handleMessageAction(message.id, "reject")
                          }
                          disabled={processingMessages.has(message.id)}
                          className="flex-1 gap-1"
                        >
                          {processingMessages.has(message.id) ? (
                            <div className="w-3 h-3 border-2 border-gray-400 border-t-transparent rounded-full animate-spin" />
                          ) : (
                            <X size={14} />
                          )}
                          Í±∞Ï†à
                        </Button>
                        <Button
                          size="sm"
                          onClick={() =>
                            handleMessageAction(message.id, "approve")
                          }
                          disabled={processingMessages.has(message.id)}
                          className="flex-1 gap-1"
                        >
                          {processingMessages.has(message.id) ? (
                            <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin" />
                          ) : (
                            <Check size={14} />
                          )}
                          ÌîÑÎ¶∞Ìä∏
                        </Button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* ÌÄµ Ïï°ÏÖò */}
        <div className="grid grid-cols-2 gap-4">
          <Link href="/friends/add">
            <Card className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="p-4 text-center">
                <UserPlus size={24} className="mx-auto mb-2 text-blue-600" />
                <p className="font-medium">ÏπúÍµ¨ Ï∂îÍ∞Ä</p>
              </CardContent>
            </Card>
          </Link>
          <Link href="/compose">
            <Card className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="p-4 text-center">
                <Send size={24} className="mx-auto mb-2 text-green-600" />
                <p className="font-medium">Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞</p>
              </CardContent>
            </Card>
          </Link>
        </div>
      </div>

      {/* Î©îÏãúÏßÄ ÌôïÏù∏ ÌåùÏóÖ (ÏùºÎ∞ò ÏπúÍµ¨Ïö©) */}
      <AlertDialog
        open={confirmDialog.isOpen}
        onOpenChange={(open) =>
          !open && setConfirmDialog({ isOpen: false, message: null })
        }
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2">
              <Bell size={20} />ÏÉà Î©îÏãúÏßÄ ÎèÑÏ∞©
            </AlertDialogTitle>
          </AlertDialogHeader>

          {/* AlertDialogDescription ÎåÄÏã† div ÏÇ¨Ïö© */}
          <div className="space-y-3 py-4">
            {confirmDialog.message && (
              <>
                <div className="flex items-center gap-2">
                  <Avatar className="h-8 w-8">
                    <AvatarImage
                      src={
                        confirmDialog.message.sender_profile.avatar_url || ""
                      }
                      alt={confirmDialog.message.sender_profile.display_name}
                    />
                    <AvatarFallback className="text-xs">
                      {confirmDialog.message.sender_profile.display_name[0]?.toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <span className="font-medium text-sm">
                    {confirmDialog.message.sender_profile.display_name}ÎãòÏù¥
                    Î©îÏãúÏßÄÎ•º Î≥¥ÎÉàÏäµÎãàÎã§.
                  </span>
                </div>

                {confirmDialog.message.lcd_teaser && (
                  <div className="bg-gray-900 text-green-400 font-mono text-sm p-2 rounded text-center">
                    "{confirmDialog.message.lcd_teaser}"
                  </div>
                )}

                <div className="text-sm text-gray-600">
                  Ïù¥ Î©îÏãúÏßÄÎ•º ÌîÑÎ¶∞Ìä∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?
                </div>
              </>
            )}
          </div>

          <AlertDialogFooter>
            <AlertDialogCancel onClick={handleConfirmReject}>
              Í±∞Ï†à
            </AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmPrint}>
              ÌîÑÎ¶∞Ìä∏
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
