"use client";

import { useState, useEffect } from "react";
import {
  UserPlus,
  Search,
  Heart,
  Clock,
  Mail,
  X,
} from "lucide-react";
import Link from "next/link";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { useAuthStore } from "@/stores/auth.store";
import {
  getFriendsList,
  acceptFriendRequest,
  rejectFriendRequest,
  sendCloseFriendRequest,
  acceptCloseFriendRequest,
  rejectCloseFriendRequest,
  removeCloseFriend,
  deleteFriend,
  areCloseFriends,
  getReceivedCloseFriendRequests,
  getSentCloseFriendRequests,
  cancelCloseFriendRequest,
  debugCloseFriendStatus,
  checkFriendshipStatus,
} from "@/features/friends/api";
import type { FriendWithProfile } from "@/features/friends/types";
import { toast } from "@/hooks/use-toast";
import { supabase } from "@/lib/supabase/client";
import { useRealtimeDataSync } from "@/hooks/useRealtimeDataSync";
import { FriendListSkeleton } from "@/components/ui/friend-skeleton";
 

export default function FriendsPage() {
  const { profile } = useAuthStore();
  const [friends, setFriends] = useState<FriendWithProfile[]>([]);
  const [closeFriendRequests, setCloseFriendRequests] = useState<any[]>([]);
  const [sentCloseFriendRequests, setSentCloseFriendRequests] = useState<any[]>(
    []
  );
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [updatingFriendIds, setUpdatingFriendIds] = useState<Set<string>>(
    new Set()
  );
  const [friendsCloseFriendStatus, setFriendsCloseFriendStatus] = useState<
    Record<string, boolean>
  >({});
  

  // ÏπúÌïúÏπúÍµ¨ ÏÉÅÌÉú Íµ¨Î∂Ñ Ìó¨Ìçº Ìï®Ïàò
  const getCloseFriendStatus = (friendId: string) => {
    // Ïù¥ÎØ∏ ÏÑúÎ°ú ÏπúÌïúÏπúÍµ¨Ïù∏ÏßÄ ÌôïÏù∏
    const isCloseFriend = friendsCloseFriendStatus[friendId];

    // ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    const sentRequest = sentCloseFriendRequests.find(
      (req) => req.target_profile?.id === friendId
    );

    // Î∞õÏùÄ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    // ‚ö†Ô∏è Ï§ëÎ≥µ Î∞©ÏßÄ: "Î∞õÏùÄ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Îì§" ÏÑπÏÖòÏóêÏÑú Ïù¥ÎØ∏ ÌëúÏãúÎêú Í≤ΩÏö∞ Ï†úÏô∏
    const receivedRequest = closeFriendRequests.find(
      (req) => req.requester_profile?.id === friendId
    );

    if (process.env.NODE_ENV !== 'production') console.log(`üîç ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ [${friendId}]:`, {
      isCloseFriend,
      hasSentRequest: !!sentRequest,
      hasReceivedRequest: !!receivedRequest,
      friendsCloseFriendStatus: friendsCloseFriendStatus[friendId],
      note: receivedRequest
        ? "‚ö†Ô∏è Î∞õÏùÄ Ïã†Ï≤≠Ïù¥ ÏûàÏßÄÎßå Î≥ÑÎèÑ ÏÑπÏÖòÏóêÏÑú Ï≤òÎ¶¨Îê®"
        : "Ï†ïÏÉÅ",
    });

    if (isCloseFriend) {
      if (process.env.NODE_ENV !== 'production') console.log(`üíñ [${friendId}] = ÏπúÌïúÏπúÍµ¨`);
      return "close_friend"; // üíñ ÏπúÌïúÏπúÍµ¨
    }

    if (sentRequest) {
      if (process.env.NODE_ENV !== 'production') console.log(`üì§ [${friendId}] = Ïã†Ï≤≠Ìï®`);
      return "sent_request"; // üì§ Ïã†Ï≤≠Ìï®
    }

    // ‚úÖ Î∞õÏùÄ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ÏùÄ "Î∞õÏùÄ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Îì§" ÏÑπÏÖòÏóêÏÑúÎßå ÌëúÏãú
    // "ÎÇ¥ ÏπúÍµ¨Îì§" ÏÑπÏÖòÏóêÏÑúÎäî ÏùºÎ∞òÏπúÍµ¨Î°ú Ï≤òÎ¶¨ÌïòÏó¨ Ï§ëÎ≥µ Î∞©ÏßÄ
    if (receivedRequest) {
      if (process.env.NODE_ENV !== 'production') console.log(
        `üì• [${friendId}] = Ïã†Ï≤≠Î∞õÏùå (Î≥ÑÎèÑ ÏÑπÏÖòÏóêÏÑú Ï≤òÎ¶¨, Ïó¨Í∏∞ÏÑúÎäî ÏùºÎ∞òÏπúÍµ¨Î°ú ÌëúÏãú)`
      );
      return "regular_friend"; // üíô ÏùºÎ∞òÏπúÍµ¨ (Ï§ëÎ≥µ Î∞©ÏßÄ)
    }

    if (process.env.NODE_ENV !== 'production') console.log(`üíô [${friendId}] = ÏùºÎ∞òÏπúÍµ¨`);
    return "regular_friend"; // üíô ÏùºÎ∞òÏπúÍµ¨
  };

  // ÏπúÍµ¨ Î™©Î°ù Î∞è ÏπúÌïúÏπúÍµ¨ ÏÉÅÌÉú Î°úÎìú
  const loadFriends = async () => {
    if (!profile) return;

    setIsLoading(true);
    try {
      // Î≥ëÎ†¨Î°ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const [friendsList, receivedRequests, sentRequests] = await Promise.all([
        getFriendsList(profile.id),
        getReceivedCloseFriendRequests(profile.id),
        getSentCloseFriendRequests(profile.id),
      ]);

      setFriends(friendsList);
      setCloseFriendRequests(receivedRequests);
      setSentCloseFriendRequests(sentRequests);

      // Í∞Å ÏπúÍµ¨Ïùò ÏπúÌïúÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏
      const closeFriendStatusMap: Record<string, boolean> = {};
      const acceptedFriends = friendsList.filter(
        (f) => f.status === "accepted"
      );

      if (process.env.NODE_ENV !== 'production') {
        console.log(
          "üîç ÏπúÌïúÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë, ÏπúÍµ¨ Ïàò:",
          acceptedFriends.length
        );
      }

      for (const friend of acceptedFriends) {
        const isCloseFriend = await areCloseFriends(
          profile.id,
          friend.friend_id
        );
        closeFriendStatusMap[friend.friend_id] = isCloseFriend;
        if (process.env.NODE_ENV !== 'production') {
          console.log(
            `üë• ${friend.friend_profile.display_name}: ${
              isCloseFriend ? "üíñ ÏπúÌïúÏπúÍµ¨" : "üíô ÏùºÎ∞òÏπúÍµ¨"
            }`
          );
        }

        // ÎîîÎ≤ÑÍπÖ: ÏπúÌïúÏπúÍµ¨Í∞Ä ÏïÑÎãåÎç∞ Ïôú Í∑∏Îü∞ÏßÄ ÏÉÅÏÑ∏ Î∂ÑÏÑù (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå)
        if (!isCloseFriend && process.env.NODE_ENV === "development") {
          console.log(
            `üîç ${friend.friend_profile.display_name} ÏÉÅÏÑ∏ Î∂ÑÏÑù ÏãúÏûë...`
          );
          await debugCloseFriendStatus(profile.id, friend.friend_id);
        }
      }

      setFriendsCloseFriendStatus(closeFriendStatusMap);
      if (process.env.NODE_ENV !== 'production') console.log("‚úÖ ÏπúÌïúÏπúÍµ¨ ÏÉÅÌÉú Îßµ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:", closeFriendStatusMap);
    } catch (error) {
      console.error("ÏπúÍµ¨ Î™©Î°ù Î°úÎìú Ïã§Ìå®:", error);
      toast({
        title: "Î°úÎìú Ïã§Ìå®",
        description: "ÏπúÍµ¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadFriends();
  }, [profile]);

  // Ïã§ÏãúÍ∞Ñ ÏπúÍµ¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ
  useEffect(() => {
    if (!profile) return;

    if (process.env.NODE_ENV !== 'production') console.log("üîÑ ÏπúÍµ¨ ÏÉÅÌÉú Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ ÏãúÏûë");

    // friendships ÌÖåÏù¥Î∏î Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Íµ¨ÎèÖ
    const friendshipsSubscription = supabase
      .channel("friendships_changes")
      .on(
        "postgres_changes",
        {
          event: "*",
          schema: "public",
          table: "friendships",
          filter: `friend_id=eq.${profile.id}`, // ÎÇ¥Í∞Ä Î∞õÏùÄ ÏöîÏ≤≠Îì§
        },
        (payload) => {
          if (process.env.NODE_ENV !== 'production') console.log("üì¢ ÏπúÍµ¨ ÏöîÏ≤≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω:", payload);
          // ÏπúÍµ¨ Î™©Î°ù Îã§Ïãú Î°úÎìú
          loadFriends();
        }
      )
      .on(
        "postgres_changes",
        {
          event: "*",
          schema: "public",
          table: "friendships",
          filter: `user_id=eq.${profile.id}`, // ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ ÏöîÏ≤≠Îì§
        },
        (payload) => {
          if (process.env.NODE_ENV !== 'production') console.log("üì¢ ÎÇ¥ ÏπúÍµ¨ ÏöîÏ≤≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω:", payload);
          // ÏπúÍµ¨ Î™©Î°ù Îã§Ïãú Î°úÎìú
          loadFriends();
        }
      )
      .subscribe();

    return () => {
      if (process.env.NODE_ENV !== 'production') console.log("üîÑ ÏπúÍµ¨ ÏÉÅÌÉú Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ Ìï¥Ï†ú");
      friendshipsSubscription.unsubscribe();
    };
  }, [profile]);

  // ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Î≥¥ÎÇ¥Í∏∞ (Î∞©Ïñ¥Ï†Å ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç)
  const handleSendCloseFriendRequest = async (friendId: string) => {
    if (!profile) return;

    // Ï§ëÎ≥µ ÌÅ¥Î¶≠ Î∞©ÏßÄ
    if (updatingFriendIds.has(friendId)) {
      if (process.env.NODE_ENV !== 'production') console.log("‚ö†Ô∏è Ïù¥ÎØ∏ Ï≤òÎ¶¨ Ï§ëÏù∏ ÏöîÏ≤≠ÏûÖÎãàÎã§.");
      return;
    }

    setUpdatingFriendIds((prev) => new Set(prev).add(friendId));

    try {
      if (process.env.NODE_ENV !== 'production') console.log(`üîÑ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÏãúÏûë: ${profile.id} ‚Üí ${friendId}`);

      // Ïã†Ï≤≠ Ï†Ñ ÎßàÏßÄÎßâ ÏÉÅÌÉú ÌôïÏù∏
      const preCheckResult = await debugCloseFriendStatus(profile.id, friendId);
      if (process.env.NODE_ENV !== 'production') console.log("üìã Ïã†Ï≤≠ Ï†Ñ ÏÉÅÌÉú:", preCheckResult.summary);

      if (preCheckResult.areCloseFriendsResult) {
        toast({
          title: "Ïù¥ÎØ∏ ÏπúÌïúÏπúÍµ¨",
          description: "Ïù¥ÎØ∏ ÏπúÌïúÏπúÍµ¨ÏûÖÎãàÎã§! ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...",
          variant: "default",
        });
        await loadFriends();
        return;
      }

      await sendCloseFriendRequest(friendId, profile.id);

      toast({
        title: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠",
        description: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§.",
      });

      await loadFriends(); // ÏÉÅÌÉú Í∞±Ïã†
    } catch (error) {
      console.error("ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Ïã§Ìå®:", error);

      // ÏóêÎü¨ Î©îÏãúÏßÄ Í∞úÏÑ†
      const errorMessage =
        error instanceof Error
          ? error.message
          : "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.";

      toast({
        title: "Ïã†Ï≤≠ Ïã§Ìå®",
        description: errorMessage,
        variant: "destructive",
      });

      // ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ® (ÎèôÍ∏∞Ìôî Î≥¥Ïû•)
      await loadFriends();
    } finally {
      setUpdatingFriendIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(friendId);
        return newSet;
      });
    }
  };

  // ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÏàòÎùΩ
  const handleAcceptCloseFriendRequest = async (requestId: string) => {
    try {
      if (process.env.NODE_ENV !== 'production') console.log("üîÑ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÏàòÎùΩ ÏãúÏûë:", requestId);

      // 1. Î®ºÏ†Ä Ìï¥Îãπ ÏöîÏ≤≠Ïùò Ï†ïÎ≥¥ Ï∞æÍ∏∞
      const request = closeFriendRequests.find((req) => req.id === requestId);
      if (!request) {
        console.error("‚ùå Ìï¥Îãπ ÏöîÏ≤≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:", requestId);
        return;
      }

      const friendId = request.requester_profile?.id;
      if (process.env.NODE_ENV !== 'production') console.log("üë§ ÏπúÌïúÏπúÍµ¨Í∞Ä Îê† ÏÇ¨Ïö©Ïûê:", friendId);

      // 2. ÏπúÍµ¨ Í¥ÄÍ≥Ñ ÏÉÅÌÉú ÎØ∏Î¶¨ ÌôïÏù∏
      if (profile && friendId) {
        if (process.env.NODE_ENV !== 'production') console.log("üîç ÏπúÍµ¨ Í¥ÄÍ≥Ñ ÏÉÅÌÉú ÎØ∏Î¶¨ ÌôïÏù∏...");
        const friendshipStatus = await checkFriendshipStatus(
          profile.id,
          friendId
        );
        if (process.env.NODE_ENV !== 'production') console.log("üìä ÏπúÍµ¨ Í¥ÄÍ≥Ñ ÌôïÏù∏ Í≤∞Í≥º:", friendshipStatus);
      }

      // 3. API Ìò∏Ï∂ú
      await acceptCloseFriendRequest(requestId);

      // 3. Ï¶âÏãú Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (UI Î∞òÏùëÏÑ± Ìñ•ÏÉÅ)
      if (friendId) {
        setFriendsCloseFriendStatus((prev) => ({
          ...prev,
          [friendId]: true,
        }));
        if (process.env.NODE_ENV !== 'production') console.log("‚úÖ Î°úÏª¨ ÏπúÌïúÏπúÍµ¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏Îê®:", friendId);
      }

      // 4. 1Ï¥à ÎåÄÍ∏∞ ÌõÑ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® (DB ÎèôÍ∏∞Ìôî ÏãúÍ∞Ñ ÌôïÎ≥¥)
      if (process.env.NODE_ENV !== 'production') console.log("‚è≥ 1Ï¥à ÎåÄÍ∏∞ ÌõÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®...");
      await new Promise((resolve) => setTimeout(resolve, 1000));

      await loadFriends();

      // 5. ÏàòÎùΩ ÌõÑ ÏÉÅÌÉú Ïû¨ÌôïÏù∏ (ÎîîÎ≤ÑÍπÖ)
      if (friendId && profile) {
        if (process.env.NODE_ENV !== 'production') console.log("üîç ÏàòÎùΩ ÌõÑ ÏÉÅÌÉú Ïû¨ÌôïÏù∏...");
        const recheckResult = await debugCloseFriendStatus(
          profile.id,
          friendId
        );

        if (!recheckResult.areCloseFriendsResult) {
          console.warn(
            "‚ö†Ô∏è ÏàòÎùΩÌñàÏßÄÎßå ÏïÑÏßÅ ÏπúÌïúÏπúÍµ¨Î°ú ÌôïÏù∏ÎêòÏßÄ ÏïäÏùå. Ï∂îÍ∞Ä ÏÉàÎ°úÍ≥†Ïπ® ÏãúÎèÑ..."
          );
          // Ï∂îÍ∞Ä ÎåÄÍ∏∞ ÌõÑ Ìïú Î≤à Îçî ÏãúÎèÑ
          await new Promise((resolve) => setTimeout(resolve, 2000));
          await loadFriends();
        }
      }

      toast({
        title: "ÏπúÌïúÏπúÍµ¨ ÏàòÎùΩ",
        description: "ÏπúÌïúÏπúÍµ¨Í∞Ä ÎêòÏóàÏäµÎãàÎã§!",
      });

      if (process.env.NODE_ENV !== 'production') console.log("üéâ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÏàòÎùΩ ÏôÑÎ£å");
    } catch (error) {
      console.error("ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÏàòÎùΩ Ïã§Ìå®:", error);
      toast({
        title: "ÏàòÎùΩ Ïã§Ìå®",
        description: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÏàòÎùΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  };

  // ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Í±∞Ï†à
  const handleRejectCloseFriendRequest = async (requestId: string) => {
    try {
      await rejectCloseFriendRequest(requestId);
      toast({
        title: "ÏπúÌïúÏπúÍµ¨ Í±∞Ï†à",
        description: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ÏùÑ Í±∞Ï†àÌñàÏäµÎãàÎã§.",
      });
      await loadFriends(); // ÏÉÅÌÉú Í∞±Ïã†
    } catch (error) {
      console.error("ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Í±∞Ï†à Ïã§Ìå®:", error);
      toast({
        title: "Í±∞Ï†à Ïã§Ìå®",
        description: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Í±∞Ï†àÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  };

  // ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Ï∑®ÏÜå
  const handleCancelCloseFriendRequest = async (friendId: string) => {
    if (!profile) return;

    const sentRequest = sentCloseFriendRequests.find(
      (req) => req.target_profile?.id === friendId
    );
    if (!sentRequest) return;

    setUpdatingFriendIds((prev) => new Set(prev).add(friendId));
    try {
      await cancelCloseFriendRequest(sentRequest.id);
      toast({
        title: "Ïã†Ï≤≠ Ï∑®ÏÜå",
        description: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.",
      });
      await loadFriends(); // ÏÉÅÌÉú Í∞±Ïã†
    } catch (error) {
      console.error("ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Ï∑®ÏÜå Ïã§Ìå®:", error);
      toast({
        title: "Ï∑®ÏÜå Ïã§Ìå®",
        description: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ Ï∑®ÏÜåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setUpdatingFriendIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(friendId);
        return newSet;
      });
    }
  };

  // ÏπúÌïúÏπúÍµ¨ ÎÅäÍ∏∞
  const handleRemoveCloseFriend = async (friendId: string) => {
    if (!profile) return;

    setUpdatingFriendIds((prev) => new Set(prev).add(friendId));
    try {
      await removeCloseFriend(profile.id, friendId);

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setFriendsCloseFriendStatus((prev) => ({
        ...prev,
        [friendId]: false,
      }));

      toast({
        title: "ÏπúÌïúÏπúÍµ¨ Ìï¥Ï†ú",
        description: "ÏπúÌïúÏπúÍµ¨Í∞Ä Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.",
      });
    } catch (error) {
      console.error("ÏπúÌïúÏπúÍµ¨ Ìï¥Ï†ú Ïã§Ìå®:", error);
      toast({
        title: "Ìï¥Ï†ú Ïã§Ìå®",
        description: "ÏπúÌïúÏπúÍµ¨ Ìï¥Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setUpdatingFriendIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(friendId);
        return newSet;
      });
    }
  };

  // ÏπúÍµ¨ ÏÇ≠Ï†ú
  const handleDeleteFriend = async (friendId: string) => {
    if (!profile) return;

    setUpdatingFriendIds((prev) => new Set(prev).add(friendId));
    try {
      await deleteFriend(profile.id, friendId);
      toast({
        title: "ÏπúÍµ¨ ÏÇ≠Ï†ú",
        description: "ÏπúÍµ¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.",
      });
      await loadFriends(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
    } catch (error) {
      console.error("ÏπúÍµ¨ ÏÇ≠Ï†ú Ïã§Ìå®:", error);
      toast({
        title: "ÏÇ≠Ï†ú Ïã§Ìå®",
        description: "ÏπúÍµ¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setUpdatingFriendIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(friendId);
        return newSet;
      });
    }
  };

  // ÏπúÍµ¨ ÏöîÏ≤≠ ÏàòÎùΩ
  const handleAcceptRequest = async (friendshipId: string) => {
    setUpdatingFriendIds((prev) => new Set(prev).add(friendshipId));

    try {
      await acceptFriendRequest(friendshipId);

      toast({
        title: "ÏπúÍµ¨ ÏöîÏ≤≠ ÏàòÎùΩ",
        description: "ÏπúÍµ¨ ÏöîÏ≤≠ÏùÑ ÏàòÎùΩÌñàÏäµÎãàÎã§.",
      });
      
      await loadFriends(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
    } catch (error) {
      console.error("ÏπúÍµ¨ ÏöîÏ≤≠ ÏàòÎùΩ Ïã§Ìå®:", error);
      toast({
        title: "ÏàòÎùΩ Ïã§Ìå®",
        description: "ÏπúÍµ¨ ÏöîÏ≤≠ÏùÑ ÏàòÎùΩÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setUpdatingFriendIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(friendshipId);
        return newSet;
      });
    }
  };

  // ÏπúÍµ¨ ÏöîÏ≤≠ Í±∞Ï†à
  const handleRejectRequest = async (friendshipId: string) => {
    setUpdatingFriendIds((prev) => new Set(prev).add(friendshipId));

    try {
      await rejectFriendRequest(friendshipId);

      toast({
        title: "ÏπúÍµ¨ ÏöîÏ≤≠ Í±∞Ï†à",
        description: "ÏπúÍµ¨ ÏöîÏ≤≠ÏùÑ Í±∞Ï†àÌñàÏäµÎãàÎã§.",
      });
      
      await loadFriends(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
    } catch (error) {
      console.error("ÏπúÍµ¨ ÏöîÏ≤≠ Í±∞Ï†à Ïã§Ìå®:", error);
      toast({
        title: "Í±∞Ï†à Ïã§Ìå®",
        description: "ÏπúÍµ¨ ÏöîÏ≤≠ÏùÑ Í±∞Ï†àÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    } finally {
      setUpdatingFriendIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(friendshipId);
        return newSet;
      });
    }
  };

  

  // ÎÖ∏ÏÖò Ïä§ÌÉÄÏùº ÏπúÌïúÏπúÍµ¨ Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
  const CloseFriendCard = ({ friend }: { friend: FriendWithProfile }) => {
    const status = getCloseFriendStatus(friend.friend_id);
    const isUpdating = updatingFriendIds.has(friend.friend_id);
    

    const getStatusConfig = () => {
      switch (status) {
        case "close_friend":
          return {
            borderColor: "border-red-200",
            bgColor: "bg-red-50",
            icon: <Heart size={12} className="text-red-500 fill-current" />,
            statusText: "ÏÑúÎ°ú ÏπúÌïúÏπúÍµ¨ÏòàÏöî",
            statusColor: "text-red-600",
          };
        case "sent_request":
          return {
            borderColor: "border-orange-200",
            bgColor: "bg-orange-50",
            icon: <Clock size={12} className="text-orange-500" />,
            statusText: "ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ÎåÄÍ∏∞Ï§ë",
            statusColor: "text-orange-600",
          };

        default:
          return {
            borderColor: "border-gray-200",
            bgColor: "bg-white",
            icon: null,
            statusText: null,
            statusColor: "",
          };
      }
    };

    const config = getStatusConfig();

    const renderActionButtons = () => {
      switch (status) {
        case "close_friend":
          return (
            <div className="flex items-center gap-2">
              <button
                onClick={() => handleRemoveCloseFriend(friend.friend_id)}
                disabled={isUpdating}
                className="px-2 py-1 text-xs text-gray-600 hover:bg-gray-100 rounded transition-colors duration-200"
              >
                Ìï¥Ï†ú
              </button>
              <button
                onClick={() => handleDeleteFriend(friend.friend_id)}
                disabled={isUpdating}
                className="px-2 py-1 text-xs text-red-600 hover:bg-red-100 rounded transition-colors duration-200"
              >
                ÏÇ≠Ï†ú
              </button>
            </div>
          );
        case "sent_request":
          return (
            <button
              onClick={() => handleCancelCloseFriendRequest(friend.friend_id)}
              disabled={isUpdating}
              className="inline-flex items-center gap-1.5 px-3 py-1.5 text-sm text-orange-700 hover:bg-orange-100 rounded-md transition-colors duration-200 whitespace-nowrap"
            >
              <X size={14} />
              Ïã†Ï≤≠ Ï∑®ÏÜå
            </button>
          );

        default:
          return (
            <div className="flex items-center gap-2">
              <button
                onClick={() => handleSendCloseFriendRequest(friend.friend_id)}
                disabled={isUpdating}
                className={`inline-flex items-center gap-1.5 px-3 py-1.5 text-sm rounded-md transition-colors duration-200 border whitespace-nowrap ${
                  isUpdating
                    ? "border-gray-200 bg-gray-100 text-gray-400 cursor-not-allowed"
                    : "border-gray-200 text-gray-700 hover:bg-gray-100"
                }`}
              >
                <Heart
                  size={14}
                  className={isUpdating ? "text-gray-300" : "text-gray-400"}
                />
                {isUpdating ? "Ï≤òÎ¶¨ Ï§ë..." : "ÏπúÌïúÏπúÍµ¨ ÎêòÍ∏∞"}
              </button>
              <button
                onClick={() => handleDeleteFriend(friend.friend_id)}
                disabled={isUpdating}
                className={`px-2 py-1 text-xs rounded transition-colors duration-200 ${
                  isUpdating
                    ? "text-gray-400 cursor-not-allowed"
                    : "text-red-600 hover:bg-red-100"
                }`}
              >
                ÏÇ≠Ï†ú
              </button>
            </div>
          );
      }
    };

    return (
      <div
        className={`flex items-center justify-between p-3 gap-3 rounded-lg border ${config.borderColor} ${config.bgColor} hover:shadow-sm transition-shadow duration-200`}
      >
        <div className="flex items-center gap-3 min-w-0">
            <Avatar className="h-12 w-12">
            <AvatarImage
              src={friend.friend_profile?.avatar_url || ""}
              alt={friend.friend_profile?.display_name || ""}
            />
            <AvatarFallback>
              {friend.friend_profile?.display_name?.[0]?.toUpperCase()}
            </AvatarFallback>
          </Avatar>

          <div className="min-w-0">
            <h3 className="font-medium text-gray-900 truncate">
              {friend.friend_profile.display_name}
            </h3>
            <p className="text-sm text-gray-600 truncate">@{friend.friend_profile.username}</p>
            {config.statusText && (
              <div className="flex items-center gap-1 mt-1">
                {config.icon}
                <span className={`text-xs ${config.statusColor} whitespace-nowrap`}>
                  {config.statusText}
                </span>
              </div>
            )}
          </div>
        </div>

        <div className="shrink-0 flex items-center gap-2">{renderActionButtons()}</div>
      </div>
    );
  };

  // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ
  const filteredFriends = friends.filter(
    (friend) =>
      friend.friend_profile.display_name
        .toLowerCase()
        .includes(searchQuery.toLowerCase()) ||
      friend.friend_profile.username
        .toLowerCase()
        .includes(searchQuery.toLowerCase())
  );

  // ÏÉÅÌÉúÎ≥ÑÎ°ú ÏπúÍµ¨ Î∂ÑÎ•ò
  const acceptedFriends = filteredFriends.filter(
    (f) => f.status === "accepted"
  );
  const pendingFriends = filteredFriends.filter((f) => f.status === "pending");

  // Î∞õÏùÄ ÏöîÏ≤≠Í≥º Î≥¥ÎÇ∏ ÏöîÏ≤≠ Î∂ÑÎ¶¨
  const receivedRequests = pendingFriends.filter((f) => f.is_received_request);
  const sentRequests = pendingFriends.filter((f) => !f.is_received_request);

  // ÏπúÍµ¨ Î™©Î°ùÏóêÏÑú ÏßÅÏ†ë ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
  const acceptedCount = friends.filter((f) => f.status === "accepted").length;
  const receivedRequestsCount = friends.filter(
    (f) => f.status === "pending" && f.is_received_request
  ).length;
  const sentRequestsCount = friends.filter(
    (f) => f.status === "pending" && !f.is_received_request
  ).length;
  const closeFriendsCount = Object.values(friendsCloseFriendStatus).filter(
    Boolean
  ).length;
  const closeFriendRequestsCount = closeFriendRequests.length;
  const sentCloseFriendRequestsCount = sentCloseFriendRequests.length;

  // üì° Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî (Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®)
  useRealtimeDataSync({
    onDataUpdate: loadFriends,
    syncTypes: ["friendships", "close_friends"],
    enabled: !!profile,
  });

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-md mx-auto space-y-4">
        {/* Ìó§Îçî */}
        <div className="bg-white rounded-lg px-4 py-3 shadow-sm flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold text-gray-900 leading-tight">ÏπúÍµ¨ Î™©Î°ù</h1>
            <p className="text-gray-600 mt-0.5">
              Ï¥ù {acceptedCount}Î™Ö ¬∑ ÏπúÌïúÏπúÍµ¨ {closeFriendsCount}Î™Ö
              {closeFriendRequestsCount > 0 &&
                ` ¬∑ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ ${closeFriendRequestsCount}Í∞ú`}
              {sentCloseFriendRequestsCount > 0 &&
                ` ¬∑ ÏπúÌïúÏπúÍµ¨ ÎåÄÍ∏∞ ${sentCloseFriendRequestsCount}Í∞ú`}
              {receivedRequestsCount > 0 &&
                ` ¬∑ ÏπúÍµ¨ ÏöîÏ≤≠ ${receivedRequestsCount}Í∞ú`}
              {sentRequestsCount > 0 && ` ¬∑ Î≥¥ÎÇ∏ ÏöîÏ≤≠ ${sentRequestsCount}Í∞ú`}
            </p>
          </div>
          <Link href="/friends/add">
            <Button size="sm" className="gap-2">
              <UserPlus size={16} />
              Ï∂îÍ∞Ä
            </Button>
          </Link>
        </div>

        {/* Í≤ÄÏÉâ Î∞î */}
        {friends.length > 0 && (
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-3 p-3 bg-gray-100 rounded-lg">
                <Search size={20} className="text-gray-500" />
                <input
                  type="text"
                  placeholder="ÏπúÍµ¨ Í≤ÄÏÉâ..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-transparent flex-1 outline-none text-gray-700"
                />
              </div>
            </CardContent>
          </Card>
        )}

        {/* Î°úÎî© ÏÉÅÌÉú */}
        {isLoading && <FriendListSkeleton />}

        {/* ÏπúÍµ¨ Î™©Î°ù */}
        {!isLoading &&
          (acceptedFriends.length > 0 ||
            receivedRequests.length > 0 ||
            sentRequests.length > 0) && (
            <div className="space-y-4">
              {/* Î∞õÏùÄ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Îì§ - ÎÖ∏ÏÖò Ïä§ÌÉÄÏùº (Ïö∞ÏÑ†ÏàúÏúÑ ÏµúÍ≥†) */}
              {closeFriendRequests.length > 0 && (
                <div className="space-y-4">
                  <div className="space-y-1">
                    <h3 className="text-lg font-semibold text-gray-900">
                      ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠
                    </h3>
                    <p className="text-sm text-gray-600">
                      ÏÉàÎ°úÏö¥ ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠Ïù¥ ÏûàÏñ¥Ïöî (
                      {closeFriendRequests.length}Í∞ú)
                    </p>
                    <div className="h-px bg-gray-200 mt-3"></div>
                  </div>

                  <div className="space-y-3">
                    {closeFriendRequests.map((request) => (
                      <div
                        key={request.id}
                        className="flex items-center justify-between p-3 rounded-lg border border-blue-200 bg-blue-50 hover:shadow-sm transition-shadow duration-200"
                      >
                        <div className="flex items-center gap-3">
                          <Avatar className="h-12 w-12">
                            <AvatarImage
                              src={request.requester_profile?.avatar_url || ""}
                              alt={
                                request.requester_profile?.display_name || ""
                              }
                            />
                            <AvatarFallback>
                              {request.requester_profile?.display_name?.[0]?.toUpperCase()}
                            </AvatarFallback>
                          </Avatar>

                          <div>
                            <h3 className="font-medium text-gray-900">
                              {request.requester_profile?.display_name}
                            </h3>
                            <p className="text-sm text-gray-600">
                              @{request.requester_profile?.username}
                            </p>
                            <div className="flex items-center gap-1 mt-1">
                              <Mail size={12} className="text-blue-500" />
                              <span className="text-xs text-blue-600">
                                ÏπúÌïúÏπúÍµ¨ Ïã†Ï≤≠ÏùÑ Î≥¥ÎÉàÏñ¥Ïöî
                              </span>
                            </div>
                          </div>
                        </div>

                        <div className="flex items-center gap-2">
                          <button
                            onClick={() =>
                              handleAcceptCloseFriendRequest(request.id)
                            }
                            className="px-3 py-1.5 text-sm bg-gray-900 text-white rounded-md hover:bg-gray-800 transition-colors"
                          >
                            ÏàòÎùΩ
                          </button>
                          <button
                            onClick={() =>
                              handleRejectCloseFriendRequest(request.id)
                            }
                            className="px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                          >
                            Í±∞Ï†à
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* ÎÇ¥ ÏπúÍµ¨Îì§ - ÎÖ∏ÏÖò Ïä§ÌÉÄÏùº */}
              {acceptedFriends.length > 0 && (
                <div className="space-y-4">
                  <div className="space-y-1">
                    <h3 className="text-lg font-semibold text-gray-900">
                      ÎÇ¥ ÏπúÍµ¨Îì§
                    </h3>
                    <p className="text-sm text-gray-600">
                      {searchQuery
                        ? `${acceptedFriends.length}Î™Ö Í≤ÄÏÉâÎê®`
                        : `Ï¥ù ${acceptedCount}Î™Ö ¬∑ ÏπúÌïúÏπúÍµ¨ ${closeFriendsCount}Î™Ö`}
                    </p>
                    <div className="h-px bg-gray-200 mt-3"></div>
                  </div>

                  <div className="space-y-3">
                    {acceptedFriends.map((friend) => (
                      <CloseFriendCard key={friend.id} friend={friend} />
                    ))}
                  </div>
                </div>
              )}

              {/* Î∞õÏùÄ ÏπúÍµ¨ ÏöîÏ≤≠Îì§ */}
              {receivedRequests.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <UserPlus size={20} />
                      Î∞õÏùÄ ÏπúÍµ¨ ÏöîÏ≤≠
                      <Badge variant="secondary">
                        {receivedRequests.length}Í∞ú
                      </Badge>
                    </CardTitle>
                    <CardDescription>
                      ÏπúÍµ¨ ÏöîÏ≤≠ÏùÑ ÏàòÎùΩÌïòÍ±∞ÎÇò Í±∞Ï†àÌï† Ïàò ÏûàÏäµÎãàÎã§
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {receivedRequests.map((friend) => (
                      <div
                        key={friend.id}
                        className="flex items-center justify-between p-3 rounded-lg border border-blue-200 bg-blue-50 hover:shadow-sm transition-shadow duration-200"
                      >
                        <div className="flex items-center gap-3">
                          <Avatar className="h-12 w-12">
                            <AvatarImage
                              src={friend.friend_profile?.avatar_url || ""}
                              alt={friend.friend_profile?.display_name || ""}
                            />
                            <AvatarFallback>
                              {friend.friend_profile?.display_name?.[0]?.toUpperCase()}
                            </AvatarFallback>
                          </Avatar>

                          <div>
                            <h3 className="font-medium text-gray-900">
                              {friend.friend_profile.display_name}
                            </h3>
                            <p className="text-sm text-gray-600">
                              @{friend.friend_profile.username}
                            </p>
                            <div className="flex items-center gap-1 mt-1">
                              <UserPlus size={12} className="text-blue-500" />
                              <span className="text-xs text-blue-600">
                                ÏπúÍµ¨ ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉàÏñ¥Ïöî
                              </span>
                            </div>
                          </div>
                        </div>

                        <div className="flex items-center gap-2">
                          <Button
                            size="sm"
                            onClick={() => handleAcceptRequest(friend.id)}
                            disabled={updatingFriendIds.has(friend.id)}
                            className="bg-gray-900 text-white hover:bg-gray-800"
                          >
                            ÏàòÎùΩ
                          </Button>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => handleRejectRequest(friend.id)}
                            disabled={updatingFriendIds.has(friend.id)}
                            className="text-gray-700 hover:bg-gray-100"
                          >
                            Í±∞Ï†à
                          </Button>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              )}

              {/* Î≥¥ÎÇ∏ ÏπúÍµ¨ ÏöîÏ≤≠Îì§ */}
              {sentRequests.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <UserPlus size={20} />
                      Î≥¥ÎÇ∏ ÏπúÍµ¨ ÏöîÏ≤≠
                      <Badge variant="outline">
                        {sentRequests.length}Í∞ú ÎåÄÍ∏∞Ï§ë
                      </Badge>
                    </CardTitle>
                    <CardDescription>
                      ÏÉÅÎåÄÎ∞©Ïùò ÏùëÎãµÏùÑ Í∏∞Îã§Î¶¨Í≥† ÏûàÏäµÎãàÎã§
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {sentRequests.map((friend) => (
                      <div
                        key={friend.id}
                        className="flex items-center gap-3 p-3 rounded-lg border bg-gray-50 transition-colors"
                      >
                        <Avatar className="h-12 w-12">
                          <AvatarImage
                            src={friend.friend_profile.avatar_url || ""}
                            alt={friend.friend_profile.display_name}
                          />
                          <AvatarFallback>
                            {friend.friend_profile.display_name[0]?.toUpperCase()}
                          </AvatarFallback>
                        </Avatar>

                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-gray-700 truncate">
                              {friend.friend_profile.display_name}
                            </h3>
                            <Badge variant="outline" className="text-xs">
                              ÎåÄÍ∏∞Ï§ë
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-500">
                            @{friend.friend_profile.username}
                          </p>
                        </div>

                        {/* Ï∑®ÏÜå Î≤ÑÌäº (ÏÑ†ÌÉùÏÇ¨Ìï≠) */}
                        <div className="flex items-center gap-2">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => handleRejectRequest(friend.id)}
                            disabled={updatingFriendIds.has(friend.id)}
                            className="text-gray-500 hover:text-red-600"
                          >
                            Ï∑®ÏÜå
                          </Button>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              )}
            </div>
          )}

        {/* Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå */}
        {!isLoading &&
          searchQuery &&
          filteredFriends.length === 0 &&
          friends.length > 0 && (
            <Card>
              <CardContent className="p-8 text-center">
                <div className="text-4xl mb-4">üîç</div>
                <p className="text-gray-600 mb-2">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                <p className="text-sm text-gray-500">
                  &quot;{searchQuery}&quot;ÏôÄ ÏùºÏπòÌïòÎäî ÏπúÍµ¨Í∞Ä ÏóÜÏäµÎãàÎã§
                </p>
              </CardContent>
            </Card>
          )}

        {/* ÏπúÍµ¨ ÏóÜÏùå */}
        {!isLoading && friends.length === 0 && (
          <Card>
            <CardHeader>
              <CardTitle>ÎÇ¥ ÏπúÍµ¨Îì§</CardTitle>
              <CardDescription>Ï¥ù 0Î™ÖÏùò ÏπúÍµ¨Í∞Ä ÏûàÏäµÎãàÎã§</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8 text-gray-500">
                <div className="text-4xl mb-4">üë•</div>
                <p>ÏïÑÏßÅ ÏπúÍµ¨Í∞Ä ÏóÜÏäµÎãàÎã§</p>
                <p className="text-sm mt-2">ID Í≤ÄÏÉâÏúºÎ°ú ÏπúÍµ¨Î•º Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî!</p>
                <Link href="/friends/add">
                  <Button className="mt-4 gap-2">
                    <UserPlus size={16} />Ï≤´ Î≤àÏß∏ ÏπúÍµ¨ Ï∂îÍ∞ÄÌïòÍ∏∞
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
