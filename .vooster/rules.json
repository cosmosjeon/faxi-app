{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 요구 사항 문서 (PRD) - MVP 버전\n\n## 1. 개요(Executive Summary)\nStudio Pensieve는 모바일 앱과 소형 감성 프린터를 결합한 오프라인 SNS 플랫폼으로, 디지털 과잉 소통 문제를 아날로그 방식으로 해결한다. 사용자는 친구에게 글귀·사진을 전송하면 상대 기기에서 즉시(또는 승인 후) 감열지로 출력되어 물리적 추억을 보관할 수 있다. MVP 버전은 기본 소통 기능과 BLE 연동에 초점을 맞춰 3개월 내 빠른 출시를 목표로 하며, Z세대의 재미와 40대의 향수를 자극한다. 초기 수익은 프린터 하드웨어 판매와 감열지 리필을 중심으로 한다.\n\n## 2. 문제 정의(Problem Statement)\n모바일 메시지는 과잉·피상적이며 금세 묻힌다.\n\n실제 소지·보관 가능한 물리적 소통 수단이 부족하다. (편지의 소멸, 그러나 따뜻함은 여전)\n\nZ세대와 40대 모두 느린 소통과 레트로 감성에 대한 수요가 존재한다. (2025년 한국 Z세대 SNS 피로율 60%)\n\nSNS 과잉 사용으로 인한 정신적 피로와 중독.\n\n세대·감정적 소통 단절 (부모-자녀 간 연결 수단 필요).\n\n장거리 인연 유지와 재미있는 소통 수단 부족.\n\n## 3. 목표 및 목적(Goals and Objectives)\n1차 목표: MVP 출시 (글·사진 기반 오프라인 SNS 기본 기능, BLE 연동 안정화).\n\n2차 목표: UX 강화와 추가 기능 확장.\n\n성공 지표:\n\nMAU 1만, DAU/MAU 20%.\n\nBLE 연결 성공률 90% 이상.\n\n한 달 내 프린트 성공률 >95%.\n\nNPS >30.\n\nMVP 초점: 2025년 10월 출시 (현재 2025.7.28부터 3개월 내).\n\n## 4. 타깃 사용자(Target Audience)\n1차 사용자\n중·고등학생(12~18세, 성별 무관).\n\n특징: 단체 교류, 스티커·다꾸 문화 선호.\n\n니즈: 재미·독특한 소통, 실물 기록.\n\n규모 추정: 한국 내 100만 명 (수원/경기권 학교 중심 베타).\n\n2차 사용자\n40대 레트로 감성층, 선물 구매 부모·연인, 굿즈 제작 크리에이터.\n\n페르소나 예시: 15세 학생 지수 (스티커 수집 취미, 친구와 재미 소통 원함).\n\n## 5. 사용자 스토리(User Stories)\nAs a 중고생 사용자, I want 친한 친구에게 받은 글·사진을 별도 승인 없이 즉시 프린트 so that 빠르고 재미있는 소통을 즐길 수 있다.\n\nAs a 일반 사용자, I want 친구가 보낸 메시지를 확인 후 출력 여부를 선택 so that 프라이버시를 보호할 수 있다.\n\nAs a 부모 사용자, I want 자녀와 일상 사진을 주고받으며 안부를 묻 so that 세대 간 유대감을 강화할 수 있다.\n\nAs a 사용자, I want BLE 연결 상태를 직관적으로 확인하고 재연결 so that 프린터를 쉽게 사용할 수 있다.\n\nAs a 사용자, I want 출력된 메시지를 스크랩북에 붙여 보관 so that 추억을 물리적으로 간직할 수 있다.\n\nAs a 사용자, I want 해외 친구와 일상 사진을 실물로 프린트해 받 so that 장거리 소통을 재미있게 할 수 있다.\n\n## 6. 기능 요구 사항(Functional Requirements)\n\n### 6.1 핵심 기능(Core Features) - MVP 필수 (P0 우선순위)\n친구 추가·관리\n\nID 검색·추가, 맞팔 여부 체크.\n\n즐겨찾기·친한 친구 토글 (MVP 필수: 친한 친구 자동 프린트 지원).\n\nAC: 검색 시 500ms 내 결과, 맞팔 시 UI 뱃지 표기.\n\n메시지 전송\n\n텍스트(최대 200자) + 이미지(최대 5 MB, JPG/PNG, 1개).\n\nLCD용 10자 이내 티저 입력.\n\nAC: 전송 후 1초 내 서버 저장, 수신자 PUSH 발송 (오프라인 시 큐잉).\n\n메시지 수신·출력\n\n일반 친구: 알림→예/아니오 팝업.\n\n친한 친구: 자동 프린트.\n\n폐기 시 서버·클라이언트 완전 삭제.\n\nAC: 수락~출력 완료 <5초, 실패 시 재시도 2회.\n\n프린터 연동(BLE)\n\n초기 페어링, 재연결, 상태 표시(대기/인쇄중/오류).\n\n300 dpi 감열지 출력 명령.\n\nAC: 연결 성공률 90%, 오류코드 명세.\n\n내 사진 인쇄\n\n카메라 롤 접근, 간단 편집 (크롭·회전).\n\n문구 삽입 후 즉시 프린트.\n\nAC: 편집 UI 60FPS, 프린트 요청 <3초.\n\n### 6.2 지원 기능(Supporting Features) - MVP 포함 (P1)\n메시지/프린트 히스토리 뷰어(모바일).\n\n간단한 필터·스티커 편집.\n\n프린터 펌웨어 OTA 업데이트.\n\n다국어 UI(한국어 우선, 영어 지연).\n\n### 6.3 Nice-to-Have Features - MVP 후 지연 (P2)\n예약 프린트.\n\n그룹채팅 → 그룹 동시 프린트.\n\n클라우드 백업 & 재출력.\n\n스티커 템플릿 마켓플레이스.\n\n메시지 ‘하트’ 반응 → LED 점멸.\n\n## 7. 비기능 요구 사항(Non-Functional)\n성능: 평균 응답 <500 ms, 99th <800 ms.\n\n보안: end-to-end 암호화, OAuth 2.0 인증.\n\n사용성: 3탭 이내 주요 기능 접근, 구글·애플 HIG 준수, WCAG 2.1 접근성 (색맹 지원).\n\n확장성: 월간 10만 건 메시지 처리 (초기 Supabase 무료 티어 활용).\n\n호환성: iOS 14+, Android 9+, BLE 4.2+ (2025년 기준 iOS 18+, Android 14+ 업데이트).\n\n지속 가능성: 감열지 재활용 가능 소재 사용.\n\n## 8. 기술 고려 사항(Technical Considerations)\n프론트: PWA(React)\n\n크로스플랫폼, MVP 빠른 개발, 웹 표준 기반.\n\nWeb Bluetooth API 활용 (단, iOS에서는 BLE 연동 안 됨).\n\n백엔드: Supabase (PostgreSQL, Storage, Auth).\n\n실시간: Supabase Realtime, FCM/APNs.\n\nBLE 제어: Web Bluetooth API (Android/데스크탑 중심).\n\n이미지 처리: client-side 캔버스, 서버 썸네일.\n\n프린터: Nordic nRF52, GATT profile custom, 감열 헤드 300 dpi.\n\n3rd Party: Sentry(로그), Amplitude(분석).\n\nAI 통합: 향후 OpenAI API로 문구 생성 테스트.\n\n## 9. 성공 지표(KPIs)\n주간 신규 친구 추가 수.\n\n메시지 전송 건수 / 유저 (10건/유저 목표).\n\n자동 프린트 사용 비율 (50% 이상).\n\n평균 인쇄 대기 시간.\n\n하드웨어 불량률 <1%.\n\n비즈니스 KPI: 프린터 판매량 (MVP 후 1개월 3,000대), 유저 획득 비용 <500원/명.\n\n## 10. 일정 및 마일스톤(Timeline)\nPhase 1 (0–3개월, 2025.7.28 시작): MVP 핵심 기능, BLE 기본, iOS/Android 베타 (Week 1-4: 프로토타입, Week 5-8: 개발/테스트, Week 9-12: 10월 말 런치).\n\nPhase 2 (4–6개월): 히스토리 뷰어, OTA, UX 개선.\n\nPhase 3 (7–12개월): Nice-to-Have 추가, 상용 런칭.\n\n의존성: 하드웨어 프로토타입 완료 후 앱 개발.\n\n## 11. 위험 및 대응(Risks & Mitigation)\nBLE 불안정: 펌웨어·앱 동시 업데이트, 베타 테스트 1,000명 (수동 모드 대체).\n\n감열지 지속 비용: 번들 판매, 구독 모델 검토 (초기 비용 절감).\n\n10대 개인정보 보호: 부모 동의, 데이터 최소화 (COPPA 준수).\n\n하드웨어 공급망: 수원 로컬 제조사 파트너십, 재고 버퍼 3개월.\n\n경쟁 제품 등장: 특허 출원, 차별화 (BLE + 감성 출력).\n\n## 12. 향후 고려 사항(Future Considerations)\n풀컬러 잉크리스 프린터(Pro).\n\n학교·카페용 공유 프린터.\n\nAI 추천 문구·사진 생성.\n\n브랜드 콜라보(연예인 포토카드).\n\n오프라인 이벤트 연동.\n\n확장: 구독 모델 (월 2,000원 무제한 프린트), 크라우드펀딩 자금 조달.\n\n## 13. 비즈니스 모델(Business Model) - MVP 중심\n수익 모델: 앱 무료, 프린터 판매 (10-15만 원, 마진 40%), 감열지 리필 팩 (5,000원/팩 번들).\n\n비용 구조: 개발 2억 원 (팀 5명, 3개월), 하드웨어 1억 원 (초기 1,000대), 마케팅 5,000만 원 (TikTok 중심).\n\n시장 진입: 수원/경기권 베타 런치, 바이럴 마케팅 (학교 인플루언서 협업).\n\n예상: MVP 3개월 후 매출 3억 원 (프린터 3,000대).\n",
      "writedAt": "2025-07-28T17:13:04.737Z"
    },
    {
      "type": "design-guide",
      "content": "# Studio Pensieve Design Guide (Revised)\n\n## 1. Overall Mood (전체적인 무드)\n\nStudio Pensieve는 90년대 레트로 퓨처리즘과 현대적 UX의 조화를 추구합니다. 삐삐와 팩스 시대의 투박하지만 진정성 있는 디지털 감성을 현대적으로 재해석하여, Z세대의 재미와 40대의 향수를 동시에 자극하는 감성적 소통 플랫폼의 정체성을 구현합니다. 기본 골격은 익숙한 모던 UX를 유지하되, 90년대 레트로 퓨처 디테일로 차별화된 개성을 표현합니다.\n\n- 레트로 효과(예: 스캔라인)는 옵션으로 설정 가능하게 하여 사용자 맞춤형 경험 강화.\n\n---\n\n## 2. Reference Service (참조 서비스)\n\nNotion을 주요 레퍼런스로 선정하였으며, 레트로 테마의 차별화를 위해 추가 벤치마킹을 참고합니다.\n\n- **Name**: Notion  \n- **Description**: 생산성 도구 및 워크스페이스 플랫폼  \n- **Design Mood**: 미니멀하면서도 개성 있는 절제된 컬러, 프로페셔널하면서도 친근함  \n- **Primary Color**: `#2F3437` (다크 그레이)  \n- **Secondary Color**: `#37352F` (웜 그레이)\n\n- **추가 참고**: RetroArch, Cyberpunk 2077 UI 등\n\n---\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n쿨톤 베이스 중간 채도, 레트로 퓨처리즘 반영 컬러 팔레트\n\n- **Primary**: `#2F3437` (다크 그레이)  \n- **Secondary**: `#37352F` (웜 그레이)  \n- **Accent**: `#00FF41` (LCD 그린)  \n- **Background**: `#1A1B1E` (딥 다크)  \n- **Surface**: `#25262A` (라이트 다크)  \n- **Text Primary**: `#FFFFFF` (화이트)  \n- **Text Secondary**: `#A0A0A0` (라이트 그레이)  \n- **Error**: `#FF4444` (레드)  \n- **Warning**: `#FFB800` (앰버)  \n- **Success**: `#00FF41` (LCD 그린) [추가]\n\n- **Mood**: 쿨톤, 중간 채도  \n- **Color Usage**: 중요도별 LCD 그린, 화이트, 그레이 톤 분리  \n- **Gradient**: LCD 그린-다크 그레이 그라데이션 (버튼 호버 등)  \n- **최소 대비 비율**: 4.5:1 준수, Success 컬러 추가\n\n---\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n- **Primary Font**: SF Pro Display (iOS), Roboto (Android)  \n- **Accent Font**: JetBrains Mono\n\n| 스타일        | 크기   | 굵기     | 기타 설정               |\n|---------------|--------|----------|--------------------------|\n| Heading 1     | 28px   | Bold     | Letter-spacing: -0.5px   |\n| Heading 2     | 24px   | SemiBold | Letter-spacing: -0.3px   |\n| Body Large    | 16px   | Regular  | Line-height: 24px        |\n| Body\n",
      "writedAt": "2025-07-28T17:13:04.739Z"
    },
    {
      "type": "ia",
      "content": "# Studio Pensieve Information Architecture (IA)\n\n## 1. Site Map (사이트맵)\n```\nStudio Pensieve App\n├── Authentication (인증)\n│   ├── Social Login (소셜 로그인)\n│   │   ├── Google Login\n│   │   ├── Apple Login\n│   │   └── Kakao Login\n│   └── Onboarding (온보딩)\n├── Main App (메인 앱)\n│   ├── Home (홈) - 받은 메시지 피드\n│   ├── Friends (친구)\n│   │   ├── Friend List (친구 목록)\n│   │   ├── Add Friend (친구 추가)\n│   │   └── Friend Management (친구 관리)\n│   ├── Send Message (메시지 전송)\n│   │   ├── Text + Photo Composer\n│   │   └── Teaser Message Input\n│   ├── Printer (프린터)\n│   │   ├── BLE Connection (BLE 연결)\n│   │   ├── Printer Status (프린터 상태)\n│   │   └── Personal Photo Print (개인 사진 인쇄)\n│   └── Profile (프로필)\n│       ├── Settings (설정)\n│       ├── Account Management (계정 관리)\n│       └── App Info (앱 정보)\n```\n\n## 2. User Flow (사용자 흐름)\n\n### 핵심 태스크 1: 친구와 실시간 감성 소통\n1. 사용자가 Send Message (+) 탭 선택\n2. 텍스트 입력 (최대 200자) + 이미지 첨부 (선택)\n3. LCD 티저 메시지 입력 (10자 이내)\n4. 받을 친구 선택\n5. 전송 버튼 클릭\n6. 서버 저장 및 수신자에게 Push 알림 발송\n7. **친한 친구**: 자동 프린트 실행\n8. **일반 친구**: 수신 알림 → 사용자 승인 → 프린트 실행\n\n### 핵심 태스크 2: 프린터 연동 및 개인 프린트\n1. Printer 탭 선택\n2. BLE 연결 상태 확인\n3. 연결되지 않은 경우: \"프린터 연결\" 버튼 클릭 → BLE 페어링\n4. 연결 성공 후: \"내 사진 프린트\" 선택\n5. 카메라 롤에서 사진 선택\n6. 간단 편집 (크롭, 회전, 문구 삽입)\n7. \"프린트\" 버튼 클릭 → 즉시 출력\n\n### 핵심 태스크 3: 친구 관리\n1. Friends 탭 선택\n2. \"친구 추가\" 버튼 클릭\n3. ID 검색으로 친구 찾기\n4. 친구 요청 전송 → 맞팔 확인\n5. 친구 목록에서 \"친한 친구\" 토글 설정 (자동 프린트 활성화)\n\n## 3. Navigation Structure (네비게이션 구조)\n\n### Bottom Tab Bar (하단 탭바) - Instagram 방식\n- **위치**: 화면 하단 고정\n- **구성**: 5개 탭 (홈, 친구, 전송, 프린터, 프로필)\n- **디자인**: 90년대 레트로 감성, LCD 그린 (#00FF41) 액티브 상태\n- **접근성**: 모바일 엄지손가락 최적화 영역\n\n**탭 구성:**\n1. **Home (🏠)**: 받은 메시지 피드, 실시간 알림\n2. **Friends (👥)**: 친구 목록, 친구 추가, 관리\n3. **Send (+)**: 메시지/사진 전송 (메인 액션, 중앙 강조)\n4. **Printer (🖨️)**: BLE 연결, 개인 프린트, 상태 확인\n5. **Profile (⚙️)**: 설정, 계정 관리\n\n## 4. Page Hierarchy (페이지 계층 구조)\n\n```\n/ (Depth 1) - 앱 루트\n├── /auth (Depth 1) - 인증\n│   ├── /auth/social-login (Depth 2)\n│   └── /auth/onboarding (Depth 2)\n├── /home (Depth 1) - 홈 피드\n├── /friends (Depth 1) - 친구\n│   ├── /friends/list (Depth 2)\n│   ├── /friends/add (Depth 2)\n│   └── /friends/manage/:friendId (Depth 2)\n├── /send (Depth 1) - 메시지 전송\n│   └── /send/compose (Depth 2)\n├── /printer (Depth 1) - 프린터\n│   ├── /printer/connect (Depth 2)\n│   ├── /printer/status (Depth 2)\n│   └── /printer/photo-print (Depth 2)\n└── /profile (Depth 1) - 프로필\n    ├── /profile/settings (Depth 2)\n    └── /profile/account (Depth 2)\n```\n\n## 5. Content Organization (콘텐츠 구성)\n\n| Page | Key Content Elements | Priority |\n|---|---|---|\n| Home | 받은 메시지 카드, 새 메시지 알림, 프린트 상태 표시 | High |\n| Friends | 친구 목록, 검색바, 친한친구 토글, 친구 추가 버튼 | High |\n| Send Message | 텍스트 입력창, 이미지 첨부, 티저 입력, 친구 선택 | High |\n| Printer | BLE 연결 상태, 프린터 정보, 개인 사진 프린트 버튼 | High |\n| Profile | 사용자 정보, 설정 메뉴, 자동 프린트 옵션 | Medium |\n| Friend Add | ID 검색창, 검색 결과, 친구 요청 버튼 | Medium |\n| Photo Print | 사진 선택, 편집 도구 (크롭/회전), 문구 입력 | Medium |\n\n## 6. Interaction Patterns (인터랙션 패턴)\n\n### 메시지 관련\n- **메시지 카드**: 탭하면 상세 보기, 스와이프로 승인/거절\n- **프린트 승인**: 모달 팝업으로 \"프린트할까요?\" 확인\n- **실시간 알림**: 토스트 메시지로 새 메시지 도착 알림\n\n### 프린터 관련\n- **BLE 연결**: 로딩 스피너 + 연결 상태 실시간 업데이트\n- **프린트 진행**: 프로그레스 바로 출력 상태 표시\n- **오류 처리**: 재시도 버튼과 함께 명확한 오류 메시지\n\n### 친구 관리\n- **친한 친구 토글**: 즉시 반영, LCD 그린으로 활성 상태 표시\n- **친구 검색**: 실시간 검색 결과, 디바운싱 적용\n\n### 레트로 감성 요소\n- **스캔라인 효과**: 설정에서 On/Off 가능\n- **LCD 스타일 텍스트**: 중요 상태 메시지에 적용\n- **90년대 사운드**: 프린트 완료 시 레트로 알림음\n\n## 7. URL Structure (URL 구조)\n\nPWA 기반으로 SEO 친화적이고 직관적인 URL 구조:\n\n```\n- 일반: https://studiopensieve.com/[resource]\n- 상세: https://studiopensieve.com/[resource]/[id]\n- 액션: https://studiopensieve.com/[resource]/[action]\n\n예시:\n- https://studiopensieve.com/home\n- https://studiopensieve.com/friends\n- https://studiopensieve.com/friends/add\n- https://studiopensieve.com/send\n- https://studiopensieve.com/printer\n- https://studiopensieve.com/printer/connect\n- https://studiopensieve.com/profile\n```\n\n## 8. Component Hierarchy (컴포넌트 계층 구조)\n\n### Global Components (전역 컴포넌트)\n- **BottomTabBar**: 메인 네비게이션\n- **Header**: 페이지 제목, 뒤로가기 버튼\n- **StatusBar**: 프린터 연결 상태, 네트워크 상태\n- **Toast**: 실시간 알림 메시지\n- **Modal**: 확인 팝업, 설정 모달\n\n### Page-Specific Components (페이지별 컴포넌트)\n\n#### Home Page\n- **MessageCard**: 받은 메시지 표시 카드\n- **NotificationBanner**: 새 메시지 알림\n- **EmptyState**: 메시지가 없을 때 상태\n\n#### Friends Page\n- **FriendListItem**: 친구 정보 + 친한친구 토글\n- **SearchBar**: 친구 검색 입력창\n- **AddFriendButton**: 친구 추가 플로팅 버튼\n\n#### Send Message Page\n- **MessageComposer**: 텍스트 + 이미지 작성 영역\n- **TeaserInput**: LCD 티저 메시지 입력\n- **FriendSelector**: 받을 친구 선택 컴포넌트\n\n#### Printer Page\n- **ConnectionStatus**: BLE 연결 상태 표시\n- **PrinterInfo**: 프린터 모델, 배터리 정보\n- **PhotoPrintButton**: 개인 사진 프린트 진입점\n- **PrintQueue**: 프린트 대기열 상태\n\n#### Profile Page\n- **UserProfile**: 사용자 정보 표시\n- **SettingsMenu**: 설정 옵션 리스트\n- **RetroToggle**: 레트로 효과 On/Off 스위치\n\n### Responsive Design Considerations\n- **Mobile First**: 320px ~ 428px 기본 대응\n- **Tablet 대응**: 768px 이상에서 2컬럼 레이아웃\n- **Component Scaling**: 화면 크기에 따른 컴포넌트 크기 자동 조정\n- **Touch Target**: 최소 44px 터치 영역 보장",
      "writedAt": "2025-07-28T17:13:04.739Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-07-28T17:13:04.739Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-07-28T17:13:04.739Z"
    },
    {
      "type": "git-commit-message",
      "content": "\n# Git Commit Message Rules\n\n## Format Structure\n```\n<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]\n```\n\n## Types (Required)\n- `feat`\n- `fix`\n- `docs`\n- `style`\n- `refactor`\n- `perf`\n- `test`\n- `chore`\n- `ci`\n- `build`\n- `revert`\n\n## Scope (Optional)\n- Component, file, or feature area affected\n- Use kebab-case: `user-auth`, `payment-api`\n- Omit if change affects multiple areas\n\n## Description Rules\n- Use imperative mood\n- No capitalization of first letter\n- No period at end\n- Max 50 characters\n- Be specific and actionable\n\n## Body Guidelines\n- Wrap at 72 characters\n- Explain what and why, not how\n- Separate from description with blank line\n- Use bullet points for multiple changes\n\n## Footer Format\n- `BREAKING CHANGE:` for breaking changes\n- `Closes #123` for issue references\n- `Co-authored-by: Vooster AI (@vooster-ai)`\n\n## Examples\n```\nfeat(auth): add OAuth2 Google login\n\nfix: resolve memory leak in user session cleanup\n\ndocs(api): update authentication endpoints\n\nrefactor(utils): extract validation helpers to separate module\n\nBREAKING CHANGE: remove deprecated getUserData() method\n```\n\n## Workflow Integration\n**ALWAYS write a commit message after completing any development task, feature, or bug fix.**\n\n## Validation Checklist\n- [ ] Type is from approved list\n- [ ] Description under 50 chars\n- [ ] Imperative mood used\n- [ ] No trailing period\n- [ ] Meaningful and clear context\n    ",
      "writedAt": "2025-07-28T17:13:04.739Z"
    }
  ]
}